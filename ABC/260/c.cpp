/*
問題文
高橋君はレベル N の赤い宝石を 1 個持っています。(他に宝石は持っていません。)
高橋君は次の操作を好きなだけ行うことができます。
    ・レベルn の赤い宝石 (n は2 以上) を「レベル n−1 の赤い宝石 1 個と、レベル n の青い宝石 X 個」に変換する。
    ・レベル n の青い宝石 (n は2 以上) を「レベル n−1 の赤い宝石 1 個と、レベル n−1 の青い宝石 Y 個」に変換する。
高橋君はレベル 1 の青い宝石ができるだけたくさんほしいです。操作によって高橋君はレベル 1 の青い宝石を最大何個入手できますか？

制約
1≤N≤10
1≤X≤5
1≤Y≤5
入力される値はすべて整数
*/

#include <iostream>
using namespace std;

using ll = long long;

int main() {
    int n, x, y;
    cin >> n >> x >> y;

    ll red[12], blue[12]; // 各レベル(1~10)の宝石を1個持っている状態から、入手できるレベル1の青い宝石の個数

    red[1] = 0, blue[1] = 1; // レベル1の赤い宝石からは、レベル1の青い宝石は得られず、レベル1の青い宝石からはレベル1の青い宝石は1個得られる。

    for (int level = 2; level <= n; ++level) {
        // 問題文に従って計算する。
        // red[n]の計算にblue[n]の値が必要なので、blueの計算から行うことに注意
        blue[level] = red[level-1] + blue[level-1] * y;
        red[level] = red[level-1] + blue[level] * x;
    }

    cout << red[n] << endl;

    return 0;
}
